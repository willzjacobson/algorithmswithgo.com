Priority Queues
Max prioriy queues are implemented with max heaps, max prioriy queues with min heaps (see implementation of heap sort for what that is).
Useful for things such as scheduling jobs.
A priority queue is a data structure for maintaining a set S of elements, each with an associated value called a key.
A max-priority queue supports the following operations:
INSERT(S,x) inserts the element x into the set S, which is equivalent to the operation S = S u {x}.
MAXIMUM(S) returns the element of S with the largest key.
EXTRACT-MAX(S) removes and returns the element of S with the largest key.
INCREASE-KEY(S,x,k) increases the value of element x’s key to the new value k, which is assumed to be at least as large as x’s current key value.
Alternatively, a min-priority queue supports the operations INSERT, MINIMUM, EXTRACT-MIN, and DECREASE-KEY.
A min-priority queue can be used in an event-driven simulator. The events must be simulated in order of their time of occurrence, because the simulation of an event can cause other events to be simulated in the future.
In summary, a heap can support any priority-queue operation on a set of size n in O(lg n) time.