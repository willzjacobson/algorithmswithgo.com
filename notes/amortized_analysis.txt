In amortized analysis, we average the time required to perform a sequence of data-structure operations over all the operations performed.
With amortized analysis, we can show that the average cost of an operation is small if we average over a sequence of operationss, even though a single operation within the sequence might be expensive.
Probability is not involved.

3 methods:
1) Aggregate Analysis
We show that for all n, a sequence of n operations takes worst-case time T(n) in total. In the worst case, the average cost, or amortized cost, is therefore T(n)/n.
The cost applies to each operation, even though there may be several types of operations in the sequence.
2) Accounting Method
We assign differing charges to different operations. We call the charge on an operation its amortized cost.
When an operation’s amortized cost exceeds its actual cost, we assign the difference to specific objects in the data structure as credit. Credit can help pay for later operations whose amortized cost is less than their actual cost. 
We must choose amortized cost of operations such that we actually get an upper bound on the actual cost of the sequence.
3) Potential Method
Instead of representing prepaid work as credit stored with specific objects in the data structure, the potential method of amortized analysis represents the prepaid work as “potential energy,” or just “potential,” which can be released to pay for future operations. The potential is stored in the data strructure as a whole.
The amortized cost of each operation is its actual cost, plus the change in potential due to the operation.